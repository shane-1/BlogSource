(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{225:function(e,t,v){"use strict";v.r(t);var _=v(16),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"the-zen-of-python"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#the-zen-of-python"}},[e._v("#")]),e._v(" The Zen of Python")]),e._v(" "),v("blockquote",[v("p",[e._v("by Tim Peters")])]),e._v(" "),v("h2",{attrs:{id:"en"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#en"}},[e._v("#")]),e._v(" EN")]),e._v(" "),v("p",[e._v("Beautiful is better than ugly.")]),e._v(" "),v("p",[e._v("Explicit is better than implicit.")]),e._v(" "),v("p",[e._v("Simple is better than complex.")]),e._v(" "),v("p",[e._v("Complex is better than complicated.")]),e._v(" "),v("p",[e._v("Flat is better than nested.")]),e._v(" "),v("p",[e._v("Sparse is better than dense.")]),e._v(" "),v("p",[e._v("Readability counts.")]),e._v(" "),v("p",[e._v("Special cases aren't special enough to break the rules.")]),e._v(" "),v("p",[e._v("Although practicality beats purity.")]),e._v(" "),v("p",[e._v("Errors should never pass silently.")]),e._v(" "),v("p",[e._v("Unless explicitly silenced.")]),e._v(" "),v("p",[e._v("In the face of ambiguity, refuse the temptation to guess.")]),e._v(" "),v("p",[e._v("There should be one-- and preferably only one --obvious way to do it.")]),e._v(" "),v("p",[e._v("Although that way may not be obvious at first unless you're Dutch.")]),e._v(" "),v("p",[e._v("Now is better than never.")]),e._v(" "),v("p",[e._v("Although never is often better than "),v("em",[e._v("right")]),e._v(" now.")]),e._v(" "),v("p",[e._v("If the implementation is hard to explain, it's a bad idea.")]),e._v(" "),v("p",[e._v("If the implementation is easy to explain, it may be a good idea.")]),e._v(" "),v("p",[e._v("Namespaces are one honking great idea -- let's do more of those!")]),e._v(" "),v("hr"),e._v(" "),v("h2",{attrs:{id:"中文"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中文"}},[e._v("#")]),e._v(" 中文")]),e._v(" "),v("p",[e._v("优美胜于丑陋（Python 以编写优美的代码为目标）")]),e._v(" "),v("p",[e._v("明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）")]),e._v(" "),v("p",[e._v("简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）")]),e._v(" "),v("p",[e._v("复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）")]),e._v(" "),v("p",[e._v("扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）")]),e._v(" "),v("p",[e._v("间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）")]),e._v(" "),v("p",[e._v("可读性很重要（优美的代码是可读的）")]),e._v(" "),v("p",[e._v("即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）")]),e._v(" "),v("p",[e._v("不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）")]),e._v(" "),v("p",[e._v("当存在多种可能，不要尝试去猜测")]),e._v(" "),v("p",[e._v("而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）")]),e._v(" "),v("p",[e._v("虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）")]),e._v(" "),v("p",[e._v("做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）")]),e._v(" "),v("p",[e._v("如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）")]),e._v(" "),v("p",[e._v("命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）")])])}),[],!1,null,null,null);t.default=a.exports}}]);