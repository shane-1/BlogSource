{"remainingRequest":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\vuepress-plugin-mygitalk\\libs\\Gitalk.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\vuepress-plugin-mygitalk\\libs\\Gitalk.vue","mtime":499162500000},{"path":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\qq121\\Desktop\\doc\\Git\\Blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}