{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{212:function(a,s,t){\"use strict\";t.r(s);var v=t(16),r=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"java基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java基础\"}},[a._v(\"#\")]),a._v(\" Java基础\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"类成员\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类成员\"}},[a._v(\"#\")]),a._v(\" 类成员\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"成员变量\"),t(\"br\"),a._v(\" \"),t(\"em\",[a._v(\"注:生命周期仅在大括号\")])]),a._v(\" \"),t(\"li\",[a._v(\"成员函数\")]),a._v(\" \"),t(\"li\",[a._v(\"构造函数\")]),a._v(\" \"),t(\"li\",[a._v(\"构造代码块\")]),a._v(\" \"),t(\"li\",[a._v(\"静态代码块\")])]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"在类加载过程中调用，只调用一次\")])]),a._v(\" \"),t(\"ol\",{attrs:{start:\"6\"}},[t(\"li\",[a._v(\"内部类\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"对象创建过程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象创建过程\"}},[a._v(\"#\")]),a._v(\" 对象创建过程\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"在内存分配内存空间\")]),a._v(\" \"),t(\"li\",[a._v(\"对成员变量赋默认值\")]),a._v(\" \"),t(\"li\",[a._v(\"执行构造代码块或赋值语句，如果多个，从上到下按序执行\")]),a._v(\" \"),t(\"li\",[a._v(\"构造函数\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"static成员\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#static成员\"}},[a._v(\"#\")]),a._v(\" static成员\")]),a._v(\" \"),t(\"p\",[a._v(\"static成员，跟对象无关，访问方式是\"),t(\"code\",[a._v(\"Class.XXX()\")]),t(\"br\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"随着类的加载而加载\")]),a._v(\" \"),t(\"li\",[a._v(\"先优于对象存在\")]),a._v(\" \"),t(\"li\",[a._v(\"被所有对象共享\")]),a._v(\" \"),t(\"li\",[a._v(\"可以直接被类名调用\")])]),a._v(\" \"),t(\"blockquote\"),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"静态方法只能访问静态成员\"),t(\"br\")]),a._v(\" \"),t(\"li\",[a._v(\"静态方法不能出现this，super等对象关键字\"),t(\"br\")]),a._v(\" \"),t(\"li\",[a._v(\"主函数是静态的\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"javabean\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#javabean\"}},[a._v(\"#\")]),a._v(\" javaBean\")]),a._v(\" \"),t(\"p\",[a._v(\"bean.\\ngetter/setter\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#继承\"}},[a._v(\"#\")]),a._v(\" 继承\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"抽象共享\")]),a._v(\" \"),t(\"li\",[a._v(\"多个类是子类，抽象的类是父类（超类）\")]),a._v(\" \"),t(\"li\",[a._v(\"子类可以访问父类的非private成员\")]),a._v(\" \"),t(\"li\",[a._v(\"通过extends继承\")]),a._v(\" \"),t(\"li\",[a._v(\"类只支持单重继承 + 多层继承\")])]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"不要为了获取其他类的某种功能去继承\"),t(\"br\"),a._v(\"\\n类与类之间要有所属（“is a”）关系，xx1是xx2的一种\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"super-this\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#super-this\"}},[a._v(\"#\")]),a._v(\" super | this\")]),a._v(\" \"),t(\"p\",[a._v(\"类内置的成员变量，指向的是父类（自己）对象的引用。只能在类的内部使用，类似于this。\"),t(\"br\"),a._v(\"\\n如果当前类有和父类相同的成员，若访问父类成员，需要用到\"),t(\"code\",[a._v(\"super.\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"super-this-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#super-this-2\"}},[a._v(\"#\")]),a._v(\" super() | this()\")]),a._v(\" \"),t(\"p\",[a._v(\"此方法调用的是父类（自己）的构造函数。必须是第一句\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"方法重载\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法重载\"}},[a._v(\"#\")]),a._v(\" 方法重载\")]),a._v(\" \"),t(\"p\",[a._v(\"参数不同\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"方法覆盖（重写）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法覆盖（重写）\"}},[a._v(\"#\")]),a._v(\" 方法覆盖（重写）\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"和父类的方法签名相同\")]),a._v(\" \"),t(\"li\",[a._v(\"private方法无法覆盖\")]),a._v(\" \"),t(\"li\",[a._v(\"super可以访问父类方法\")]),a._v(\" \"),t(\"li\",[a._v(\"注意事项：\"),t(\"br\"),a._v(\"\\na. 权限要想相同或放大\\nb. 静态和非静态必须一致\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"final\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#final\"}},[a._v(\"#\")]),a._v(\" final\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"修饰方法\\\\类\\\\变量\")]),a._v(\" \"),t(\"li\",[a._v(\"修饰类\"),t(\"br\"),a._v(\"\\nfinal class Dog    //不能继承.终态类\")]),a._v(\" \"),t(\"li\",[a._v(\"修饰方法\"),t(\"br\"),a._v(\"\\n不能重写,是否被继承取决于方法private与否\")]),a._v(\" \"),t(\"li\",[a._v(\"修饰字段\"),t(\"br\"),a._v(\"\\n不能修改\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"内部类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内部类\"}},[a._v(\"#\")]),a._v(\" 内部类\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"定义在class内部的类\")]),a._v(\" \"),t(\"li\",[a._v(\"编译产生OuterClass$Innerc.class\")]),a._v(\" \"),t(\"li\",[a._v(\"内部类访问外部类的局部变量,需要final修饰.\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"抽象类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#抽象类\"}},[a._v(\"#\")]),a._v(\" 抽象类\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"不能实例化的类\")]),a._v(\" \"),t(\"li\",[a._v(\"abstract修饰的类\")]),a._v(\" \"),t(\"li\",[a._v(\"抽象方法必须定义在抽象类\")])]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"final  + private 修饰成员变量有意义,为私有常量,修饰方法无意义\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#接口\"}},[a._v(\"#\")]),a._v(\" 接口\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"interface\")]),a._v(\" \"),t(\"li\",[a._v(\"接口中的成员修饰符固定\"),t(\"br\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"final\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//成员变量\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"abstract\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//成员函数\")]),a._v(\"\\n\")])])]),t(\"ol\",{attrs:{start:\"3\"}},[t(\"li\",[a._v(\"间接实现多重继承\")]),a._v(\" \"),t(\"li\",[a._v(\"最低标准\")]),a._v(\" \"),t(\"li\",[a._v(\"降低耦合\")]),a._v(\" \"),t(\"li\",[a._v(\"可以多实现\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Class\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xxx\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"implements\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xx\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xx\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"interface\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xxx\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xx\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Xx\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),t(\"h2\",{attrs:{id:\"多态\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多态\"}},[a._v(\"#\")]),a._v(\" 多态\")]),a._v(\" \"),t(\"p\",[a._v(\"指向同一个对象,但某种状态下只能访问该状态下的属性和方法\"),t(\"br\"),a._v(\"\\n接口同样具有多态\"),t(\"br\"),a._v(\"\\n范围变小\"),t(\"code\",[a._v(\"父类=子类\")]),a._v(\"可以直接赋值,但范围变大\"),t(\"code\",[a._v(\"子类=父类\")]),a._v(\"需要强制转换\"),t(\"br\"),a._v(\"\\n接口 = 类\"),t(\"code\",[a._v(\"隐式转换\")]),a._v(\",类 = 接口\"),t(\"code\",[a._v(\"强制转换\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//Animal < Dog < Husky\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Husty\")]),a._v(\" hope \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Husty\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Dog\")]),a._v(\" hope1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" hope\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Animal\")]),a._v(\" hope2 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" hope1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\nhope1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"hope1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"hope2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])])]),t(\"p\",[a._v(\"使用父类引用子类的对象\"),t(\"br\"),a._v(\"\\n使用接口引用实现类的对象\"),t(\"br\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"注意:方法继承会覆盖,但成员变量(字段\\\\数据)不会被覆盖\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"异常\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常\"}},[a._v(\"#\")]),a._v(\" 异常\")]),a._v(\" \"),t(\"p\",[a._v(\"Throwable\")]),a._v(\" \"),t(\"blockquote\",[t(\"ol\",[t(\"li\",[a._v(\"Error  //错误\"),t(\"br\")]),a._v(\" \"),t(\"li\",[a._v(\"Exception  //异常\")])])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"try\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"catch\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"eException e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"finally\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),t(\"p\",[a._v(\"throws用于标识函数暴露的异常\"),t(\"br\"),a._v(\"\\nthrow用于抛出异常对象\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"区别:\"),t(\"br\"),a._v(\"\\nthrows用在函数上,后面跟异常类名\"),t(\"br\"),a._v(\"\\nthrow用在函数内,后面跟异常对象\")])]),a._v(\" \"),t(\"hr\")])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}