{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{454:function(t,a,s){\"use strict\";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"java基础\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java基础\"}},[t._v(\"#\")]),t._v(\" Java基础\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"Less is More!\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"标识符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标识符\"}},[t._v(\"#\")]),t._v(\" 标识符\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"所有标识符都应该以字母(A-Z或a-z),美元符($),或者下划线(_)开始\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"不允许数字开头\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"不能使用关键字\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"数据类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据类型\"}},[t._v(\"#\")]),t._v(\" 数据类型\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"强类型语言\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强类型语言\"}},[t._v(\"#\")]),t._v(\" 强类型语言\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"基本类型(primitive type)\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"类型\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"字节\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"byte\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"short\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"int\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"4\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"long\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"8\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"float\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"4\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"double\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"8\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"char\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"2\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"1位\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" num \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//需要数字后加个L(最好使用大写,防止误读)\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"float\")]),t._v(\" f \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.1f\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//JDK新特性,数字之间可以用下划线分割\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" money \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10_0000_0000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"p\",[s(\"strong\",[t._v(\"最好避免使用浮点数去比较大小,需要考虑舍入误差\")])]),t._v(\" \"),s(\"p\",[s(\"u\",[t._v(\"金融使用\"),s(\"code\",[t._v(\"BigDecimal\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"引用类型(reference type)\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"进制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#进制\"}},[t._v(\"#\")]),t._v(\" 进制\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"二进制 0b数字\")]),t._v(\" \"),s(\"li\",[t._v(\"十进制 数字\")]),t._v(\" \"),s(\"li\",[t._v(\"八进制 0数字\")]),t._v(\" \"),s(\"li\",[t._v(\"十六进制 0x数字\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"类成员\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类成员\"}},[t._v(\"#\")]),t._v(\" 类成员\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"成员变量\"),s(\"br\"),t._v(\" \"),s(\"em\",[t._v(\"注:生命周期仅在大括号\")])]),t._v(\" \"),s(\"li\",[t._v(\"成员函数\")]),t._v(\" \"),s(\"li\",[t._v(\"构造函数\")]),t._v(\" \"),s(\"li\",[t._v(\"构造代码块\")]),t._v(\" \"),s(\"li\",[t._v(\"静态代码块\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"在类加载过程中调用，只调用一次\")])]),t._v(\" \"),s(\"ol\",{attrs:{start:\"6\"}},[s(\"li\",[t._v(\"内部类\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"对象创建过程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象创建过程\"}},[t._v(\"#\")]),t._v(\" 对象创建过程\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"在内存分配内存空间\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"对成员变量赋默认值\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"执行构造代码块或赋值语句，如果多个，从上到下按序执行\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"构造函数\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如果有有参构造,建议写上无参构造供框架反射调用.\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"static成员\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#static成员\"}},[t._v(\"#\")]),t._v(\" static成员\")]),t._v(\" \"),s(\"p\",[t._v(\"static成员，跟对象无关，访问方式是\"),s(\"code\",[t._v(\"Class.XXX()\")]),s(\"br\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"随着类的加载而加载\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"没赋值默认有初始值\")]),t._v(\" \"),s(\"p\",[t._v(\"布尔值: 默认false\")]),t._v(\" \"),s(\"p\",[t._v(\"除了基本类型默认是null\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"先优于对象存在\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"被所有对象共享\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"可以直接被类名调用\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"静态的只能访问静态的,非静态的可以访问全部\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"因为静态对象随类先加载,不能让其访问不存在的东西(例某个对象的属性方法)\")])])])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"静态方法只能访问静态成员\")]),t._v(\" \"),s(\"li\",[t._v(\"静态方法不能出现this，super等对象关键字\")]),t._v(\" \"),s(\"li\",[t._v(\"主函数是静态的\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"javadoc\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#javadoc\"}},[t._v(\"#\")]),t._v(\" javadoc\")]),t._v(\" \"),s(\"p\",[t._v(\"使用\"),s(\"code\",[t._v(\"/**-----*/\")])]),t._v(\" \"),s(\"p\",[t._v(\"参数列表:\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"@author\")]),t._v(\" \"),s(\"li\",[t._v(\"@Version\")]),t._v(\" \"),s(\"li\",[t._v(\"@Since\")]),t._v(\" \"),s(\"li\",[t._v(\"@param\")]),t._v(\" \"),s(\"li\",[t._v(\"@return\")]),t._v(\" \"),s(\"li\",[t._v(\"@throws\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"javadoc -encoding UTF-8 -charset UTF-8 xx.java\")]),t._v(\"\\n生成文档\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"javabean\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#javabean\"}},[t._v(\"#\")]),t._v(\" JavaBean\")]),t._v(\" \"),s(\"p\",[t._v(\"bean.\\ngetter/setter\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"封装\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#封装\"}},[t._v(\"#\")]),t._v(\" 封装\")]),t._v(\" \"),s(\"p\",[t._v(\"将相应属性隐藏,使用方法访问,可以\"),s(\"strong\",[t._v(\"自定义\")]),t._v(\"重写对应的get\\\\set方法\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"继承\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#继承\"}},[t._v(\"#\")]),t._v(\" 继承\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"抽象共享\")]),t._v(\" \"),s(\"li\",[t._v(\"多个类是子类，抽象的类是父类（超类）\")]),t._v(\" \"),s(\"li\",[t._v(\"子类可以访问父类的非private成员\")]),t._v(\" \"),s(\"li\",[t._v(\"通过extends继承\")]),t._v(\" \"),s(\"li\",[t._v(\"类只支持单重继承 + 多层继承\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"不要为了获取其他类的某种功能去继承\"),s(\"br\"),t._v(\"\\n类与类之间要有所属（“is a”）关系，xx1是xx2的一种\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"OOP面向对象编程 重要的一点是继承复用\")]),t._v(\" \"),s(\"li\",[t._v(\"AOP面向切面编程 也是为了复用\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"多态\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多态\"}},[t._v(\"#\")]),t._v(\" 多态\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"子类和父类重写的方法实现规则不一样\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"父类引用指向子类对象\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"父类.方法()执行的是子类的实现\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"只能调用父类中声明的方法\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"编译时\")]),t._v(\" \"),s(\"p\",[t._v(\"overload\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"xxx.java ---\\x3e xxx.class\")])]),t._v(\" \"),s(\"p\",[t._v(\"运行时\")]),t._v(\" \"),s(\"p\",[t._v(\"override\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"super-this\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#super-this\"}},[t._v(\"#\")]),t._v(\" super | this\")]),t._v(\" \"),s(\"p\",[t._v(\"  类内置的成员变量，指向的是父类（自己）对象的引用。只能在类的内部使用，类似于this。\"),s(\"br\"),t._v(\"\\n  如果当前类有和父类相同的成员，若访问父类成员，需要用到\"),s(\"code\",[t._v(\"super.\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"super-this-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#super-this-2\"}},[t._v(\"#\")]),t._v(\" super() | this()\")]),t._v(\" \"),s(\"p\",[t._v(\"此方法调用的是父类（自己）的构造函数。必须是第一句\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"方法重载\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法重载\"}},[t._v(\"#\")]),t._v(\" 方法重载\")]),t._v(\" \"),s(\"p\",[t._v(\"参数不同\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"方法覆盖-重写\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法覆盖-重写\"}},[t._v(\"#\")]),t._v(\" 方法覆盖（重写）\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"和父类的方法签名相同\")]),t._v(\" \"),s(\"li\",[t._v(\"private方法无法覆盖\")]),t._v(\" \"),s(\"li\",[t._v(\"super可以访问父类方法\")]),t._v(\" \"),s(\"li\",[t._v(\"注意事项：\"),s(\"br\"),t._v(\"\\na. 权限要想相同或放大\\nb. 静态和非静态必须一致\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"final\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#final\"}},[t._v(\"#\")]),t._v(\" final\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"修饰方法\\\\类\\\\变量\")]),t._v(\" \"),s(\"li\",[t._v(\"修饰类\"),s(\"br\"),t._v(\"\\nfinal class Dog    //不能继承.终态类\")]),t._v(\" \"),s(\"li\",[t._v(\"修饰方法\"),s(\"br\"),t._v(\"\\n不能重写,是否被继承取决于方法private与否\")]),t._v(\" \"),s(\"li\",[t._v(\"修饰变量\"),s(\"br\"),t._v(\"\\n不能修改,常量\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"内部类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内部类\"}},[t._v(\"#\")]),t._v(\" 内部类\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"定义在class内部的类\")]),t._v(\" \"),s(\"li\",[t._v(\"编译产生OuterClass$Innerc.class\")]),t._v(\" \"),s(\"li\",[t._v(\"内部类访问外部类的局部变量,需要final修饰.\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"抽象类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#抽象类\"}},[t._v(\"#\")]),t._v(\" 抽象类\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"不能实例化的类\")]),t._v(\" \"),s(\"li\",[t._v(\"abstract修饰的类\")]),t._v(\" \"),s(\"li\",[t._v(\"抽象方法必须定义在抽象类\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"final  + private 修饰成员变量有意义,为私有常量,修饰方法无意义\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"接口\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#接口\"}},[t._v(\"#\")]),t._v(\" 接口\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"interface\")]),t._v(\" \"),s(\"li\",[t._v(\"接口中的成员修饰符固定\"),s(\"br\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//成员变量\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"abstract\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//成员函数\")]),t._v(\"\\n\")])])]),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[t._v(\"间接实现多重继承\")]),t._v(\" \"),s(\"li\",[t._v(\"最低标准\")]),t._v(\" \"),s(\"li\",[t._v(\"降低耦合\")]),t._v(\" \"),s(\"li\",[t._v(\"可以多实现\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xxx\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xx\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xx\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xxx\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xx\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Xx\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"面向接口的编程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向接口的编程\"}},[t._v(\"#\")]),t._v(\" 面向接口的编程\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"开闭原则\\n\"),s(\"ul\",[s(\"li\",[t._v(\"对扩展开放\")]),t._v(\" \"),s(\"li\",[t._v(\"对修改关闭\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"多态-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多态-2\"}},[t._v(\"#\")]),t._v(\" 多态\")]),t._v(\" \"),s(\"p\",[t._v(\"  指向同一个对象,但某种状态下只能访问该状态下的属性和方法\"),s(\"br\"),t._v(\"\\n  接口同样具有多态\"),s(\"br\"),t._v(\"\\n  更加抽象\"),s(\"code\",[t._v(\"父类=子类\")]),t._v(\"可以直接赋值,更加具体\"),s(\"code\",[t._v(\"子类=父类\")]),t._v(\"需要强制转换\"),s(\"br\"),t._v(\"\\n  接口 = 类\"),s(\"code\",[t._v(\"隐式转换\")]),t._v(\",类 = 接口\"),s(\"code\",[t._v(\"强制转换\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//Animal < Dog < Husky\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Husty\")]),t._v(\" hope \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Husty\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Dog\")]),t._v(\" hope1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" hope\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Animal\")]),t._v(\" hope2 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" hope1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nhope1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"hope1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"hope2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"  使用父类引用子类的对象\"),s(\"br\"),t._v(\"\\n  使用接口引用实现类的对象\"),s(\"br\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"注意:方法继承会覆盖,但成员变量(字段\\\\数据)不会被覆盖\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"异常和错误\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常和错误\"}},[t._v(\"#\")]),t._v(\" 异常和错误\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"异常:在Java语言中,将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"Java程序在执行过程中所发生的异常事件分为两类:\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"Error错误: Java虚拟机无法解决的严重问题。如: JVM系统内部错误、资源耗尽等严重情况。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"比如:\")]),t._v(\" \"),s(\"p\",[t._v(\"StackOverflowError和OOM,一般不编写针对性的代码进行处理。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"Exception异常:其它因编程错误或偶然的外在因素导致的一般性问题,可以使用针对性的代码进行处理。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"例如:\")]),t._v(\" \"),s(\"p\",[t._v(\"空指针访问\")]),t._v(\" \"),s(\"p\",[t._v(\"试图读取不存在的文件\")]),t._v(\" \"),s(\"p\",[t._v(\"网络连接中断\")]),t._v(\" \"),s(\"p\",[t._v(\"数组角标越界\")])])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"对于这些错误,一般有两种解决方法:\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"一是遇到错误就终止程序的运行。\")]),t._v(\" \"),s(\"li\",[t._v(\"另一种方法是由程序员在编写程序时,就考虑到错误的检测、错误消息的提示,以及错误的处理。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"捕获错误最理想的是在编译期间,但有的错误只有在运行时才会发生。比如:除数为0,数组下标越界等\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"分类:编译时异常和运行时异常\")])])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"/images/2020-09-27-13-28-37.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"蓝色:非受检(unchecked)异常\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"异常分类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常分类\"}},[t._v(\"#\")]),t._v(\" 异常分类\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"运行时异常\\n\"),s(\"ul\",[s(\"li\",[t._v(\"是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误,是程序员应该积极避免其出现的异常。\"),s(\"code\",[t._v(\"java.lang.RuntimeException\")]),t._v(\"类及它的子类都是运行时异常。\")]),t._v(\" \"),s(\"li\",[t._v(\"对于这类异常,可以不作处理,因为这类异常很普遍,若全处理可能会对程序的可读性和运行效率产生影响。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"编译时异常\\n\"),s(\"ul\",[s(\"li\",[t._v(\"是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。\")]),t._v(\" \"),s(\"li\",[t._v(\"编译器要求Java程序必须捕获或声明所有编译时异常。对于这类异常,如果程序不处理,可能会带来意想不到的结果。\")])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"finally\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//除了system.exit(0),finally的语句在返回等情况下都会执行\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"throw-throws\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#throw-throws\"}},[t._v(\"#\")]),t._v(\" throw&throws\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"throws：用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用我我就抛给谁。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"用在方法声明后面，跟的是异常类名\")]),t._v(\" \"),s(\"li\",[t._v(\"可以跟多个异常类名，用逗号隔开\")]),t._v(\" \"),s(\"li\",[t._v(\"表示抛出异常，由该方法的调用者来处理\")]),t._v(\" \"),s(\"li\",[t._v(\"throws表示出现异常的一种可能性，并不一定会发生这些异常\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"throw：则是用来抛出一个具体的异常类型。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"用在方法体内，跟的是异常对象名\")]),t._v(\" \"),s(\"li\",[t._v(\"只能抛出一个异常对象名\")]),t._v(\" \"),s(\"li\",[t._v(\"表示抛出异常，由方法体内的语句处理\")]),t._v(\" \"),s(\"li\",[t._v(\"throw则是抛出了异常，执行throw则一定抛出了某种异常\")])])])]),t._v(\" \"),s(\"hr\"),t._v(\" \"),s(\"p\",[t._v(\"异常的子类catch应在异常父类catch之前\"),s(\"br\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CheckedException\")]),t._v(\"   \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//待检异常,非运行时异常,必须声明抛出语句\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RuntimeException\")]),t._v(\"   \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//运行异常,不需要在方法声明抛出语句,也不需要必须使用try/catch语句处理\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"一个方法被覆盖是,覆盖它的方法必须抛出相同的异常或异常的子类,范围可以缩小,不能放大\"),s(\"br\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"自定义异常\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义异常\"}},[t._v(\"#\")]),t._v(\" 自定义异常\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"一般地,用户自定义异常类都是RuntimeException的子类。\")]),t._v(\" \"),s(\"li\",[t._v(\"自定义异常类通常需要编写几个重载的构造器。\")]),t._v(\" \"),s(\"li\",[t._v(\"自定义异常需要提供serialVersionUID自定义的异常通过throw抛出。\")]),t._v(\" \"),s(\"li\",[t._v(\"自定义异常最重要的是异常类的名字,当异常出现时,可以根据名字判断异常类型。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"package\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#package\"}},[t._v(\"#\")]),t._v(\" package\")]),t._v(\" \"),s(\"p\",[t._v(\"完整类名:包名.类名(全限定名 full qualified name)\"),s(\"br\"),t._v(\"\\n命名规则:com\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"jar  //java archive\\near  //enterprise archive\\nwar  //web\\nhar  //hadoop \\ntar  \\n\")])])]),s(\"h2\",{attrs:{id:\"相对路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#相对路径\"}},[t._v(\"#\")]),t._v(\" 相对路径\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\".   //当前目录\"),s(\"br\"),t._v(\"\\n..  // 上级目录\"),s(\"br\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"绝对路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#绝对路径\"}},[t._v(\"#\")]),t._v(\" 绝对路径\")]),t._v(\" \"),s(\"p\",[t._v(\"C:\\\\xx\\\\xx\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"权限访问\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#权限访问\"}},[t._v(\"#\")]),t._v(\" 权限访问\")]),t._v(\" \"),s(\"p\",[t._v(\"private     //私有,不能继承\"),s(\"br\"),t._v(\"\\npublic      //公有\"),s(\"br\"),t._v(\"\\nprotected   //受保护,针对其他包中的子类\"),s(\"br\"),t._v(\"\\ndefault       //默认,不写.不同包不能继承\"),s(\"br\"),t._v(\"\\n一个java源文件只能有一个public类\"),s(\"br\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"范围\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"public\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"protected\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"default\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"private\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"同类\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"同包\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"子类\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}})]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"不同包\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"✓\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}})])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"jar\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jar\"}},[t._v(\"#\")]),t._v(\" jar\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"打包方式一\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"jar cvf xxx.jar Xxx.class Yyy.class\")]),t._v(\" //指定class\")]),t._v(\" \"),s(\"li\",[t._v(\"打包方式二\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"jar cvf xxx.jar -C xxx/.\")]),t._v(\"//指定目录\")]),t._v(\" \"),s(\"li\",[t._v(\"查看jar文件\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"jar -tf xxx.jar\")])]),t._v(\" \"),s(\"li\",[t._v(\"运行jar中的类\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"java -cp xxx.jar xx.xx.xx;\")]),t._v(\"//后面跟完整类名\")]),t._v(\" \"),s(\"li\",[t._v(\"指定清单文件(xxx.jar/META-INF/MENIFEST.MF)的入口类\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...\")]),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"jar -cvfe classes.jar com.day01.java.PagDemo classes/ .\")])]),t._v(\" \"),s(\"li\",[t._v(\"如果jar中的清单文件含有入口点(Main-Class),''可以直接使用以下命令执行\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"java -jar classes.jar\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"eclipse快捷键\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#eclipse快捷键\"}},[t._v(\"#\")]),t._v(\" eclipse快捷键\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"    alt \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//内容辅助\")]),t._v(\"\\n    ctl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" alt \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" down \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//向下复制一行\")]),t._v(\"\\n    ctl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" alt \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" up \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//向上复制一行\")]),t._v(\"\\n\\n    alt \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" down \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//向下移动一行\")]),t._v(\"\\n    alt \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" up \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//向上移动一行\")]),t._v(\"\\n    ctl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" d \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//删除一整行\")]),t._v(\"\\n    ctl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" shift \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" f \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//代码格式化\")]),t._v(\"\\n\\n    shift \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" enter \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//中途回车,不换行\")]),t._v(\"\\n    ctrl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//切换注释\")]),t._v(\"\\n    ctrl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" shift \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//块注释\")]),t._v(\"\\n    ctrl \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" shift \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \\\\ \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//解除块注释 \")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"java单元测试\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java单元测试\"}},[t._v(\"#\")]),t._v(\" java单元测试\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"junit\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Test\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//rember to import related jar\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Test\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" test1 \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"blockquote\",[s(\"p\",[t._v(\"@Test只能加到非静态方法上\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-jave extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"@Before\\n//非静态方法前\\n\\n@Before Class\\n//静态方法前\\n\")])])]),s(\"h2\",{attrs:{id:\"lambda表达式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#lambda表达式\"}},[t._v(\"#\")]),t._v(\" Lambda表达式\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"避免匿名内部类定义过多\")]),t._v(\" \"),s(\"li\",[t._v(\"实质属于函数式编程的概念\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"(params)->expression[表达式]\"),s(\"br\"),t._v(\"(params)->statement[语句]\"),s(\"br\"),t._v(\"(params)->{statements}\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v('a-> System.out.println(\"Test lambda\");')]),s(\"br\"),t._v(\" \"),s(\"code\",[t._v('new Thread (()->System.out.println(\"new thread\")).start();')]),s(\"br\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//推导lambda\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//1.函数式接口\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ILike\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"lambda\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//2.实现\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Like\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ILike\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"lambda\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Lambda~\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" test\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ILike\")]),t._v(\" like \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Like\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//匿名内部类,没有类名，借助接口或父类\")]),t._v(\"\\n        like \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ILike\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"lambda\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Lambda~~\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        like\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"lambda\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// >>>>>>>>lambda简化\")]),t._v(\"\\n        like \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Lambda~~~\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        like\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"lambda\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"ul\",[s(\"li\",[t._v(\"lambda表达式只能有一行代码的情况下才能简化成为一行,如果有多行,那么就用代码块包裹\")]),t._v(\" \"),s(\"li\",[t._v(\"前提是接口为函数式接口\")]),t._v(\" \"),s(\"li\",[t._v(\"多个参数也可以去掉参数类型,要去的就都去掉,必须加上括号.\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"string类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string类\"}},[t._v(\"#\")]),t._v(\" String类\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"字符串类\\nfinal类,无法继承\")]),t._v(\" \"),s(\"li\",[t._v(\"内部采用char[]数组存储\")]),t._v(\" \"),s(\"li\",[t._v(\"内部不能改变,属于常量\")]),t._v(\" \"),s(\"li\",[t._v(\"常见方法\"),s(\"br\"),t._v(\"\\nstr.length(); //长度\"),s(\"br\"),t._v(\"\\nstr.trim();   //删除头尾空白符的字符串\"),s(\"br\"),t._v('\\nsrt.split(\"x\");//按照x规则进行切割'),s(\"br\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"字符集\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符集\"}},[t._v(\"#\")]),t._v(\" 字符集\"),s(\"br\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"ascii :     美国国家标准交换码,使用一个字节的7\\n位表示.\"),s(\"br\"),t._v(\"\\niso-8859-1:     欧洲码表,使用8位表示,无法存储汉字.\"),s(\"br\"),t._v(\"\\ngb2312:     中文码表,简体中文.两个字节存储.\"),s(\"br\"),t._v(\"\\ngbk:    gb2312升级版\"),s(\"br\"),t._v(\"\\nbig-5:      繁体中文\"),s(\"br\"),t._v(\"\\nutf-8:     变长字符表示法,最多使用三个字节表示.\"),s(\"br\"),t._v(\"\\nunicode:      两个字节表示字符,java中使用该码\")])]),t._v(\" \"),s(\"hr\"),t._v(\" \"),s(\"p\",[t._v(\"Charset.defaultCharset();\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"编码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码\"}},[t._v(\"#\")]),t._v(\" 编码\")]),t._v(\" \"),s(\"p\",[t._v(\"encode\"),s(\"br\"),t._v(\"\\nString --\\x3e byte[]\"),s(\"br\"),t._v('\\nString.getBytes(\"gbk\"); //编码格式')]),t._v(\" \"),s(\"h3\",{attrs:{id:\"解码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解码\"}},[t._v(\"#\")]),t._v(\" 解码\")]),t._v(\" \"),s(\"p\",[t._v(\"decode\"),s(\"br\"),t._v(\"\\nbyte[] --\\x3e String\"),s(\"br\"),t._v('\\nnew String(arr,\"gbk\")//解码格式')]),t._v(\" \"),s(\"h2\",{attrs:{id:\"stringbuffer\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stringbuffer\"}},[t._v(\"#\")]),t._v(\" StringBuffer\")]),t._v(\" \"),s(\"p\",[t._v(\"线程安全\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"stringbuilder\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stringbuilder\"}},[t._v(\"#\")]),t._v(\" StringBuilder\")]),t._v(\" \"),s(\"p\",[t._v(\"非线程安全\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"包装类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包装类\"}},[t._v(\"#\")]),t._v(\" 包装类\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//自动装箱=基本数据类型->包装类对象\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//自动拆箱=包装类对象->直接提取基本数据类型\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" ii\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"blockquote\",[s(\"p\",[t._v(\"基本数据类型没有null的概念\"),s(\"br\"),t._v(\"\\n数值类型基本数据类型(成员变量)默认值是0.\"),s(\"br\")])]),t._v(\" \"),s(\"hr\"),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"包装类的默认是null.\"),s(\"br\"),t._v(\"\\n有NullPointerException.\"),s(\"em\",[t._v(\"注意初始化\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"容器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#容器\"}},[t._v(\"#\")]),t._v(\" 容器\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"数组\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组\"}},[t._v(\"#\")]),t._v(\" 数组\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"类型相同\")]),t._v(\" \"),s(\"li\",[t._v(\"长度固定\")]),t._v(\" \"),s(\"li\",[t._v(\"可以存放基本类型\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"集合类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合类\"}},[t._v(\"#\")]),t._v(\" 集合类\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"长度不固定\")]),t._v(\" \"),s(\"li\",[t._v(\"类型可以不同\")]),t._v(\" \"),s(\"li\",[t._v(\"不能存放基本类型\")]),t._v(\" \"),s(\"li\",[t._v(\"List: 有序,可重复\"),s(\"br\"),t._v(\"\\nArrayList\"),s(\"br\"),t._v(\"\\nLinkedList\")]),t._v(\" \"),s(\"li\",[t._v(\"Set:无序,不能重复\"),s(\"br\"),t._v(\"\\n  存取无序,判断hash code是否相同,如果不同,可以存放,相同则判断是否为同一对象,同样则重复,否则再使用equals方法判断是否相同\")]),t._v(\" \"),s(\"li\",[t._v(\"Map:key-value,\"),s(\"strong\",[t._v(\"key有set的特点\")]),t._v(\".\\n\"),s(\"img\",{attrs:{src:\"/images/2020-04-11-08-55-07.png\",alt:\"\"}})])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//迭代器访问,list为ArrayList\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" it \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hasNext\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),t._v(\" cat1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"next\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[s(\"code\",[t._v(\"==\")]),t._v(\"判断内存地址\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"equals\")]),t._v(\"默认只判断内存地址,需要进行重写\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//equals 重写实例:\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//poj为null\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//是非为同一对象\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" obj\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//得到obj的类\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),t._v(\" objClazz \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"gatClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"objClazz \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" flase\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),t._v(\" b \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"obj\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" bname \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" age \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" b\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAge\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" nameEqual \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"bname \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n           nameEqual \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n   \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n           nameEqual \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"bname\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n           \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n   \\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" nameEqual \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"age \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" bage\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"list使用add添加对象,保存的是引用,相同对象指向相同.\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"arraylist\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist\"}},[t._v(\"#\")]),t._v(\" ArrayList\")]),t._v(\" \"),s(\"p\",[t._v(\"Object[]\"),s(\"br\"),t._v(\"\\nCapacity    //容量\"),s(\"br\"),t._v(\"\\nsize          //元素个数\"),s(\"br\"),t._v(\"\\nindex + offset\"),s(\"br\"),t._v(\"\\n只判断对象是否存在,只跟equals有关.\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"linkedlist\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linkedlist\"}},[t._v(\"#\")]),t._v(\" LinkedList\")]),t._v(\" \"),s(\"p\",[t._v(\"clear方法会移除元素,降低容量,与arraylist不变容量不同.\"),s(\"br\"),t._v(\"\\n链表优缺点\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"vector\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vector\"}},[t._v(\"#\")]),t._v(\" Vector\")]),t._v(\" \"),s(\"p\",[t._v(\"类似于ArrayList,通过对象数组实现\"),s(\"br\"),t._v(\"\\n线程安全的\"),s(\"br\"),t._v(\"\\n迭代器在Collection接口中是通用的,它替代了vector的Enumeration(枚举)\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"set\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#set\"}},[t._v(\"#\")]),t._v(\" Set\")]),t._v(\" \"),s(\"p\",[t._v(\"元素是唯一的\"),s(\"br\"),t._v(\"\\n无序的\"),s(\"br\"),t._v(\"\\n通过迭代器访问\"),s(\"br\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" it \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" set\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hasNext\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"next\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"HashSet和HashMap没有本质区别.底层用Dummy当Key\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"map\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#map\"}},[t._v(\"#\")]),t._v(\" Map\")]),t._v(\" \"),s(\"p\",[t._v(\"映射\"),s(\"br\"),t._v(\"\\nKey ---\\x3e value  //Entry,条目\"),s(\"br\"),t._v(\"\\nput(k,v);\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"1.判断hashcode是否相同\"),s(\"br\"),t._v(\"\\n2.相同则判断是否同一对象,满足则不添加\"),s(\"br\"),t._v(\"\\n3.如果调用equals方法为真,满足则不添加\"),s(\"br\"),t._v(\" \"),s(\"code\",[t._v(\"key.hash == p.hash && (key == p || key.equals(p));\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"hashset-vs-hashmap\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashset-vs-hashmap\"}},[t._v(\"#\")]),t._v(\" HashSet vs HashMap\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"底层无最本质区别,Set采用Map实现.\")]),t._v(\" \"),s(\"li\",[t._v(\"哈希本质是打散元素(散列),在容器中均匀存放.\")]),t._v(\" \"),s(\"li\",[t._v(\"map为数组和链表的组合.\")]),t._v(\" \"),s(\"li\",[t._v(\"HashCode默认返回对象内存地址,故一般需要重写方法,根据元素特征值生成.\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"hash的方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hash的方式\"}},[t._v(\"#\")]),t._v(\" Hash的方式\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"h = key.hasCode() ^ (h >>>16) //^ 异或\")]),s(\"br\"),t._v(\"\\n^会使数更加散列,更多特征值决定哈希值\"),s(\"br\"),t._v(\"\\nhashSet线程不安全\"),s(\"br\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"new hash\"),s(\"br\"),t._v(\"\\nh = e.hashCode;\"),s(\"br\"),t._v(\"\\nh ^(h >>> 16)\")]),t._v(\" \"),s(\"li\",[t._v(\"定位桶\"),s(\"br\"),t._v(\"\\nnewhash & (n-1) // n为桶个数\")]),t._v(\" \"),s(\"li\",[t._v(\"判断桶元素 == null\"),s(\"br\"),t._v(\"\\n为null,直接放入\"),s(\"br\")]),t._v(\" \"),s(\"li\",[t._v(\"不为空\"),s(\"br\"),t._v(\"\\n(hash == p.hash&&())\"),s(\"br\")]),t._v(\" \"),s(\"li\",[t._v(\"继续此过程\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"treeset\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#treeset\"}},[t._v(\"#\")]),t._v(\" TreeSet\")]),t._v(\" \"),s(\"p\",[t._v(\"  通过Comparator.compareTo或者comparable.compare()方法来保证元素是否相等.元素是以二叉树形式存放的.\"),s(\"br\"),t._v(\"\\n  实现\"),s(\"strong\",[t._v(\"Comparator接口\")]),t._v(\"或\"),s(\"strong\",[t._v(\"传入对比器\")]),t._v(\"都可以实现对象的树集合\"),s(\"br\"),t._v(\"\\nTreeSet同样通过TreeMap实现\"),s(\"br\"),t._v(\"\\n  字符的compareTo通过较短字符串的长度逐个比较存储对应码值,返回差值\"),s(\"br\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"注:中文码值与笔画有关\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"泛型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\"}},[t._v(\"#\")]),t._v(\" 泛型\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"提高了程序的安全性\")]),t._v(\" \"),s(\"li\",[t._v(\"将运行期遇到的问题转移到编码期\")]),t._v(\" \"),s(\"li\",[t._v(\"省去了类型强转的麻烦\")]),t._v(\" \"),s(\"li\",[t._v(\"泛型类的出现优化了程序设计\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"遍历方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#遍历方式\"}},[t._v(\"#\")]),t._v(\" 遍历方式\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"for\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"size\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"ol\",{attrs:{start:\"2\"}},[s(\"li\",[t._v(\"iteterator\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" it \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"iterator\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hasNext\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    it\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"next\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[t._v(\"for+\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//for(数据类型 变量名:数组或Collection集合)\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"blockquote\",[s(\"p\",[t._v(\"增强for循环可用于多种迭代过程,类似Python的for each in.\"),s(\"br\"),t._v(\"例:\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Map\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" map \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HashMap\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Set\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Entry\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" set \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" map\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"entrySet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Entry\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" set\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" key \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getKey\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" value \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getValue\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//可变参数-可允许出现一个且必须为最后一个参数\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//不会产生空指针异常,默认为空数组\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"List\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"x\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"io\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#io\"}},[t._v(\"#\")]),t._v(\" IO\")]),t._v(\" \"),s(\"p\",[t._v(\"Stream -> byte[]\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"数据类型\"),s(\"br\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"字节流\"),s(\"br\"),t._v(\"\\n字符流\"),s(\"br\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"处理文本,防止乱码\")])])]),t._v(\" \"),s(\"ol\",{attrs:{start:\"2\"}},[s(\"li\",[t._v(\"流向\"),s(\"br\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"输入流\"),s(\"br\"),t._v(\"\\n输出流\"),s(\"br\")])]),t._v(\" \"),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[t._v(\"性能\"),s(\"br\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"缓冲区流\"),s(\"br\")])]),t._v(\" \"),s(\"ol\",{attrs:{start:\"4\"}},[s(\"li\",[t._v(\"性能\"),s(\"br\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"转换流\"),s(\"br\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"InputStream/OutputStream -> Reader/Writer\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"流的超类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#流的超类\"}},[t._v(\"#\")]),t._v(\" 流的超类\")]),t._v(\" \"),s(\"p\",[t._v(\"InputStream\"),s(\"br\"),t._v(\"\\nOutputStream\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"字符流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符流\"}},[t._v(\"#\")]),t._v(\" 字符流\")]),t._v(\" \"),s(\"p\",[t._v(\"Reader\"),s(\"br\"),t._v(\"\\nWriter\"),s(\"br\"),t._v(\"\\n文本首选\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"字节流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字节流\"}},[t._v(\"#\")]),t._v(\" 字节流\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputStream\")]),t._v(\" fis \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newFileInputStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"d:/xx/x.txt\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" buf \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"fis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"available\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nfis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"read\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nfis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"close\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//编码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputStream\")]),t._v(\" fis \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"d:/xx/x.txt\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InputStreamReader\")]),t._v(\" isr \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InputStreamReader\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"utf-8\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" buf \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"char\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" isr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"read\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" len\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\nisr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"close\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"缓冲区字符流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓冲区字符流\"}},[t._v(\"#\")]),t._v(\" 缓冲区字符流\")]),t._v(\" \"),s(\"p\",[t._v(\"默认缓冲区:8K\"),s(\"br\"),t._v(\" \"),s(\"em\",[t._v(\"先关缓冲区，后关文件流\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"输入输出流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#输入输出流\"}},[t._v(\"#\")]),t._v(\" 输入输出流\")]),t._v(\" \"),s(\"p\",[t._v(\"改变System.out.print到文件\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setOut\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"PrintStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileOutputStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"x:/xx/x.txt\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"XXXXXXX\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"读取控制台输入\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InputStream\")]),t._v(\" in \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"BufferedReader\")]),t._v(\" br \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"BufferedReader\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InputStreamReader\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"in\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//转换流\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" line  \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"line \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" br\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"readLine\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"line\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"quit\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"exit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//退出\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"line\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"文件归档\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件归档\"}},[t._v(\"#\")]),t._v(\" 文件归档\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"文件名字节数\")]),t._v(\" \"),s(\"li\",[t._v(\"文件名\")]),t._v(\" \"),s(\"li\",[t._v(\"文件字节数\")]),t._v(\" \"),s(\"li\",[t._v(\"文件\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"文件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件\"}},[t._v(\"#\")]),t._v(\" 文件\")]),t._v(\" \"),s(\"p\",[t._v(\"包名:java.io.File\"),s(\"br\"),t._v(\"\\n类名:File\"),s(\"br\"),t._v(\"\\n方法:\"),s(\"br\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"File.exists();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.isDirectory();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.isFile();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.mkdirs(); //创建目录\")]),t._v(\" \"),s(\"li\",[t._v(\"File.createNewFile();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.listFiles();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.getAbsolutePath();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.getName();\")]),t._v(\" \"),s(\"li\",[t._v(\"File.getCanonicalPath(); //得到正规路径名\"),s(\"br\")])]),t._v(\" \"),s(\"p\",[t._v(\"打印输出目录结构:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printDir\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" f \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"exists\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAbsolutePath\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"is\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isDirectory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" fileList \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"listFiles\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fileList \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" fileList\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" singelFile \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" fileList\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printDir\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"singelFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAbsolutePath\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"递归复制到指定文件夹:\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"copyDir\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" destDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" f \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"exists\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"is\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isDirectory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//创建目录\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" newFile \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"destDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            newFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"mkdirs\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" fileList \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" f\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"listFiles\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fileList \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" fileList\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" singelFile \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" fileList\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"copyDir\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"singleFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAbsolutePath\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" newFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAbsolutePath\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"copyFile\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"destDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"copyFile\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" srcFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" destDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" file \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"srcFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),t._v(\" newFile \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"File\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"destDir\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputStream\")]),t._v(\" fis \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileInputStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"file\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileOutputStream\")]),t._v(\" fos \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FileOutputStream\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newFile\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" buf \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"byte\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" fis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"read\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            fos\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"buf\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" len\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        fos\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"close\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        fis\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"close\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"     \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//不推荐捕获类型,这里旨在简化代码\")]),t._v(\"\\n        e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"hr\"),t._v(\" \"),s(\"p\",[t._v(\"整理不易，转载请注明出处。\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}